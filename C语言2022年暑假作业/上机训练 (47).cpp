/*8、简单的哥德巴赫猜想
若两个素数之和等于偶数x，则称这两个素数为“与偶数x关联的素数对”。由哥德巴赫猜想可知：任何大于等于6的偶数x都会有一个或多个素数对与之关联。在与x关联的所有素数对中，有一对素数的乘积大于所有其他素数对的乘积值，称这个素数对为“与x关联且乘积值最大的素数对”。例如：(3,37)、(11,29)、和(17,23)都是与40关联的素数对，这些素数对中乘积值最大的素数对是(17,23)。因此，称(17,23)为“与40关联且乘积值最大的素数对”。
【程序功能】
若两个素数之和等于偶数x，则称这两个素数为“与偶数x关联的素数对”。由哥德巴赫猜想可知：任何大于等于6的偶数x都会有一个或多个素数对与之关联。在与x关联的所有素数对中，有一对素数的乘积大于所有其他素数对的乘积值，称这个素数对为“与x关联且乘积值最大的素数对”。
例如：(3,37)、(11,29)、和(17,23)都是与40关联的素数对，这些素数对中乘积值最大的素数对是(17,23)。因此，称(17,23)为“与40关联且乘积值最大的素数对”。
编写程序为一维数组中每个大于等于6的偶数找出与其关联且乘积值最大的素数对。
【编程要求】
(1)编写函数int getMAX(int x[],int n,int y[][3])实现以下功能：取x指向的一维数组n个元素中所有任何大于等于6的偶数。求与每个偶数关联且乘积最大素数对。将此偶数及其关联的乘积值最大的素数对保存到y指向报数组中。函数返回y数组中有效数据的行数。
(2).编写main函数实现如下功能：声明一维数组a和二维数组b并用测试数据初始化a数组。用a、b数组作为实参调用getMAX函数。按所给格式将b数组中数据输出屏幕及。
【测试数据与运行结果】
a数组初始化数据：{2,12,22,3,13,23,4,14,24}
输出：12  (5,7)
      22  (5,17)
      14  (3,11)
      24  (11,15)*/
#include <stdio.h>
#include <conio.h>
#include <math.h>
int prime(int x)
{  
	int i;         
    if(x==1) return false;  
    for(i=2;i<=sqrt(x);i++)
		if(x%i==0)  return false;
	    return true;
}
int getMax(int x[], int n, int y[][3])
{  
	int max=0,count=0;
	for(int i=0 ; i<n ; i++)
		if(x[i]>=6&&x[i]%2==0)
		{
			max=0;
			for(int j=2 ; j<x[i]/2 ; j++)
				if(prime(j)&&prime(x[i]-j))
				{
					if(j*(x[i]-j)>max)
					{
						max=j*(x[i]-j);
						y[count][0]=x[i];
						y[count][1]=j;
						y[count][2]=(x[i]-j);
					}
				}
			
			count++;
		}
	return count;
	
}
main()
{  int a[9]={2,12,22,3,13,23,4,14,24},b[9][3], m,n=9,i;
   printf("\n");
   m=getMax(a,n,b);
   for(i=0;i<m;i++)
      printf("%d:(%d,%d)\n", b[i][0],b[i][1], b[i][2]);
}
